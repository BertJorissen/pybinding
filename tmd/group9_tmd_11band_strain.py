"""Tight-binding models for group 4 transition metal dichalcogenides (TMD), 11 band."""
import re
import pybinding as pb
import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import block_diag

_default_11band_strain_params = {
    # from https://link.aps.org/doi/10.1103/PhysRevB.102.045128
    #Name   :  [     a,     d_0,    d_1, lamb_m, lamb_c,    d_e,  e_phi,
    #            eps_0,   eps_1,  eps_2,  eps_3,  eps_4,  eps_5,
    #            a_0_0,   a_1_0,  a_2_0,  a_3_0,  a_4_0,  a_5_0,
    #            b_0_0,   b_1_0,  b_2_0,  b_3_0,  b_4_0,  b_5_0,  b_6_0,
    #            t_0_1,   t_1_1,  t_2_1,  t_3_1,  t_4_1,  t_5_1,
    #            t_6_1,   t_7_1,  t_8_1,  t_9_1, t_10_1, t_11_1,
    #            a_0_1,   a_1_1,  a_2_1,  a_3_1,  a_4_1,  a_5_1,
    #            a_6_1,   a_7_1,  a_8_1,  a_9_1, a_10_1, a_11_1,
    #            b_0_1,   b_1_1,  b_2_1,  b_3_1,  b_4_1,  b_5_1,  b_6_1,
    #            b_7_1,   b_8_1,  b_9_1, b_10_1, b_11_1, b_12_1, b_13_1,
    #           b_14_1,  b_15_1, b_16_1, b_17_1, b_18_1, b_19_1, b_20_1,
    #            t_0_2,   t_1_2,  t_2_2,  t_3_2,  t_4_2,  t_5_2,  t_6_2,  t_7_2,
    #            t_8_2,   t_9_2, t_10_2, t_11_2, t_12_2, t_13_2, t_14_2,
    #            a_0_2,   a_1_2,  a_2_2,  a_3_2,  a_4_2,  a_5_2,  a_6_2,  a_7_2,
    #            a_8_2,   a_9_2, a_10_2, a_11_2, a_12_2, a_13_2, a_14_2,
    #            b_0_2,   b_1_2,  b_2_2,  b_3_2,  b_4_2,  b_5_2,  b_6_2,  b_7_2,
    #            b_8_2,   b_9_2, b_10_2, b_11_2, b_12_2, b_13_2, b_14_2, b_15_2,
    #           b_16_2,  b_17_2, b_18_2, b_19_2, b_20_2, b_21_2, b_22_2, b_23_2,
    #            t_0_3,   t_1_3,  t_2_3,  t_3_3,  t_4_3,  t_5_3,
    #            t_6_3,   t_7_3,  t_8_3,  t_9_3, t_10_3, t_11_3,
    #            a_0_3,   a_1_3,  a_2_3,  a_3_3,  a_4_3,  a_5_3,
    #            a_6_3,   a_7_3,  a_8_3,  a_9_3, a_10_3, a_11_3,
    #            b_0_3,   b_1_3,  b_2_3,  b_3_3,  b_4_3,  b_5_3,  b_6_3,
    #            b_7_3,   b_8_3,  b_9_3, b_10_3, b_11_3, b_12_3, b_13_3,
    #           b_14_3,  b_15_3, b_16_3, b_17_3, b_18_3, b_19_3, b_20_3]

    "TiS2" : [  0.341,   0.142,  0.071,  0.018,  0.0556,-0.430,  5.640,
              -10.093, -10.030, -7.441, -7.072, -7.676, -0.442,
               -5.791,  -3.771, -6.723, -8.008, -6.659,  0.408,
               -0.642,   0.410,  0.476,  0.322, -0.554, -0.195, -0.101,
                0.530,   1.252,  0.386, -0.698, -0.493,  0.811,
                0.479,  -0.574,  0.220, -0.112,  0.430, -0.363,
                0.667,  -0.659, -1.169,  0.750,  0.363, -0.407,
               -1.381,   0.281,  0.550, -0.435, -0.001, -0.625,
                0.129,  -0.320, -1.185,  1.026,  0.670, -0.736, -0.400,
                0.530,   1.283, -0.263,  0.792,  0.530,  0.119,  0.752,
               -0.138,   0.189,  0.086, -0.371,  0.028,  0.080, -0.313,
               -0.067,   0.701, -0.113, -0.050,  0.015, -0.018,  0.032, -0.125,
               -0.214,  -0.021, -0.103,  0.210,  0.114, -0.196,  0.094,
                0.059,  -1.344,  0.408, -0.104, -0.030,  0.020, -0.581,  0.128,
                0.944,  -0.202,  0.677, -0.383, -0.069,  0.727, -0.047,
               -0.516,   1.656, -0.439, -0.100,  0.085, -0.024,  0.475,  0.034,
               -0.010,   0.315,  0.160, -0.922,  0.019, -0.233,  0.464,  0.127,
               -0.552,   0.067,  0.216, -0.130,  0.167, -0.006, -0.076, -0.161,
               -0.055,   0.018,  0.037, -0.057,  0.022,  0.011,
               -0.060,   0.014, -0.040, -0.086, -0.072,  0.028,
                0.314,   0.122, -0.411,  0.024, -0.220, -0.273,
                0.323,   0.184,  0.054,  0.085,  0.088, -0.044,
                0.524,  -0.461, -0.096, -0.012, -0.135, -0.004,  0.240,
                0.110,   0.158,  0.073, -0.227,  0.115,  0.148, -0.120,
               -0.015,  -0.351,  0.177, -0.036, -0.306,  0.041, -0.030],
    "TiSe2": [  0.353,   0.156,  0.076,  0.018,  0.247, -0.360,  5.220,
               -9.195,  -9.238, -6.809, -6.468, -6.998, -0.359,
               -5.989,  -3.816, -6.992, -8.008, -6.855,  0.301,
               -0.604,   0.505,  0.367,  0.334, -0.497, -0.167, -0.131,
                0.433,   1.122,  0.386, -0.635, -0.441,  0.729,
                0.500,  -0.507,  0.201, -0.102,  0.454, -0.349,
                0.634,  -0.454, -1.002,  0.624,  0.271, -0.289,
               -1.214,   0.187,  0.526, -0.420,  0.040, -0.617,
                0.193,  -0.115, -1.115,  0.883,  0.594, -0.573, -0.327,
                0.409,   1.139, -0.376,  0.672,  0.444,  0.125,  0.707,
               -0.209,   0.221,  0.032, -0.279, -0.064,  0.074, -0.287,
               -0.072,   0.782, -0.137, -0.051,  0.019, -0.034,  0.056, -0.091,
               -0.201,  -0.016, -0.108,  0.166,  0.088, -0.182,  0.077,
                0.036,  -1.493,  0.464, -0.102, -0.023,  0.018, -0.576, -0.006, 
                0.835,  -0.154,  0.638, -0.284, -0.024,  0.622, -0.000,
               -0.570,   1.835, -0.502, -0.121,  0.088, -0.063,  0.524,  0.023,
               -0.021,   0.332,  0.175, -0.758,  0.002, -0.205,  0.357,  0.100,
               -0.470,   0.068,  0.221, -0.120,  0.149, -0.013, -0.048, -0.151,
               -0.054,   0.008,  0.051, -0.052,  0.020,  0.027,
               -0.057,   0.008, -0.041, -0.080, -0.073,  0.024,
                0.266,   0.118, -0.429,  0.009, -0.201, -0.317,
                0.306,   0.211,  0.051,  0.052,  0.097, -0.022,
                0.515,  -0.424, -0.105, -0.015, -0.125, -0.054,  0.231,
                0.133,   0.138,  0.076, -0.226,  0.108,  0.159, -0.106,
               -0.018,  -0.350,  0.155, -0.075, -0.308,  0.042, -0.044],
    "TiTe2": [  0.374,   0.175,  0.083,  0.018,  0.512, -0.310,  4.700,
               -7.117,  -7.324, -5.080, -4.776, -5.269, -0.304,
               -7.350,  -4.825, -8.206, -8.649, -7.738,  0.196,
               -0.692,   0.594,  0.251,  0.338, -0.334, -0.128, -0.114,
                0.322,   0.962,  0.391, -0.565, -0.376,  0.601,
                0.465,  -0.423,  0.194, -0.065,  0.455, -0.292,
                0.568,  -0.257, -0.888,  0.516,  0.095, -0.124,
               -0.864,   0.025,  0.523, -0.425,  0.083, -0.639,
                0.208,   0.019, -0.994,  0.751,  0.467, -0.326, -0.242,
                0.309,   0.986, -0.430,  0.515,  0.272,  0.132,  0.591,
               -0.172,   0.196,  0.011, -0.221, -0.161,  0.033, -0.264,
               -0.040,   0.883, -0.162, -0.051,  0.030, -0.034,  0.072, -0.074,
               -0.188,  -0.004, -0.113,  0.141,  0.070, -0.170,  0.058,
               -0.115,  -1.681,  0.548, -0.118, -0.014, -0.031, -0.536, -0.135,
                0.722,  -0.119,  0.568, -0.223,  0.031,  0.503,  0.089,
               -0.718,   2.106, -0.573, -0.121,  0.081, -0.035,  0.610,  0.027,
               -0.039,   0.341,  0.158, -0.622, -0.005, -0.152,  0.269,  0.037,
               -0.378,   0.049,  0.198, -0.145,  0.117, -0.016, -0.030, -0.111,
               -0.058,  -0.014,  0.063, -0.064,  0.048,  0.034,
               -0.083,   0.000, -0.051, -0.068, -0.065,  0.015,
                0.233,   0.172, -0.426, -0.006, -0.234, -0.366,
                0.345,   0.246,  0.068,  0.012,  0.053, -0.009,
                0.559,  -0.318, -0.095, -0.010, -0.136, -0.079,  0.238,
                0.178,   0.160,  0.005, -0.258,  0.093,  0.204, -0.131,
                0.010,  -0.288,  0.131, -0.105, -0.266,  0.042, -0.026],
    "NbS2" : [  0.335,   0.155,  0.070,  0.071,  0.0556, 0.100,  5.200,
               -9.023,  -9.120, -6.523, -5.725, -6.803, -0.680,
               -5.618,  -4.046, -5.086, -6.718, -4.898,  0.245,
               -0.477,   0.355,  0.576,  0.472, -0.623, -0.227, -0.041,
                0.548,   1.537,  0.555, -0.847, -0.597,  0.978,
                0.778,  -0.667,  0.145, -0.127,  0.356, -0.262,
                0.914,  -0.380, -1.274,  0.538,  0.203, -0.175,
               -1.750,  -0.116,  0.395, -0.413,  0.037, -0.539,
                0.423,   0.071, -1.398,  1.056,  0.849, -0.673, -0.505,
                0.470,   1.538, -0.605,  0.867,  0.626,  0.270,  1.079,
               -0.349,   0.289, -0.105, -0.141, -0.230,  0.107, -0.155,
               -0.087,   0.732, -0.159, -0.047,  0.039, -0.036,  0.140, -0.188,
               -0.467,  -0.006, -0.267,  0.339,  0.158, -0.387,  0.126,
                0.039,  -1.329,  0.493, -0.132, -0.077, -0.104, -1.242, -0.258,
                1.608,  -0.357,  1.200, -0.292,  0.127,  1.028,  0.227,
               -0.544,   1.734, -0.574, -0.152,  0.170, -0.057,  0.489,  0.036,
               -0.008,   0.820,  0.601, -1.406, -0.066, -0.376,  0.516,  0.121,
               -0.868,   0.152,  0.545, -0.235,  0.392, -0.061, -0.027, -0.390,
               -0.077,  -0.005,  0.093, -0.048,  0.046,  0.049,
               -0.091,  -0.016, -0.044, -0.131, -0.089,  0.065,
                0.242,   0.259, -0.520, -0.097, -0.301, -0.423,
                0.377,   0.293,  0.088,  0.014,  0.005, -0.065,
                0.625,  -0.565, -0.098, -0.085, -0.191, -0.051,  0.327,
                0.234,   0.223,  0.178, -0.330,  0.118,  0.189, -0.150,
                0.003,  -0.560,  0.242, -0.116, -0.508,  0.095, -0.034],
    "NbSe2": [  0.346,   0.168,  0.078,  0.071,  0.247,  0.090,  4.800,
               -8.126,  -8.322, -5.950, -5.256, -6.192, -0.548,
               -4.835,  -3.126, -4.600, -5.818, -4.406,  0.137,
               -0.423,   0.553,  0.445,  0.526, -0.450, -0.173, -0.049,
                0.448,   1.378,  0.543, -0.772, -0.532,  0.885,
                0.788,  -0.586,  0.135, -0.110,  0.395, -0.262,
                0.850,  -0.153, -1.085,  0.396,  0.097, -0.065,
               -1.506,  -0.210,  0.418, -0.403,  0.047, -0.538,
                0.482,   0.282, -1.283,  0.925,  0.724, -0.441, -0.335,
                0.350,   1.413, -0.762,  0.742,  0.512,  0.237,  1.035,
               -0.449,   0.327, -0.175, -0.028, -0.327,  0.081, -0.133,
               -0.089,   0.831, -0.187, -0.048,  0.040, -0.049,  0.169, -0.121,
               -0.432,  -0.005, -0.263,  0.265,  0.117, -0.351,  0.096,
                0.012,  -1.523,  0.557, -0.130, -0.053, -0.088, -1.177, -0.452,
                1.418,  -0.248,  1.099, -0.205,  0.163,  0.851,  0.253,
               -0.616,   1.965, -0.655, -0.191,  0.172, -0.119,  0.561,  0.020,
               -0.038,   0.780,  0.566, -1.140, -0.101, -0.340,  0.389,  0.103,
               -0.716,   0.154,  0.544, -0.220,  0.365, -0.088,  0.008, -0.368,
               -0.071,  -0.015,  0.107, -0.042,  0.041,  0.070,
               -0.089,  -0.023, -0.046, -0.119, -0.089,  0.057,
                0.194,   0.227, -0.528, -0.101, -0.245, -0.484,
                0.352,   0.330,  0.094, -0.034,  0.023, -0.014,
                0.593,  -0.518, -0.102, -0.079, -0.175, -0.113,  0.314,
                0.256,   0.209,  0.144, -0.311,  0.118,  0.202, -0.132,
                0.004,  -0.574,  0.211, -0.189, -0.538,  0.110, -0.042],
    "NbTe2": [  0.362,   0.187,  0.080,  0.071,  0.512,  0.000,  4.510,
               -6.178,  -6.582, -4.413, -3.855, -4.694, -0.459,
               -6.604,  -4.564, -6.592, -6.767, -5.744,  0.130,
               -0.589,   0.715,  0.342,  0.556, -0.071, -0.202,  0.037,
                0.326,   1.182,  0.547, -0.694, -0.437,  0.724,
                0.709,  -0.470,  0.128, -0.052,  0.409, -0.208,
                0.669,  -0.032, -0.945,  0.302, -0.121,  0.015,
               -1.052,  -0.363,  0.438, -0.388,  0.074, -0.551,
                0.445,   0.294, -1.125,  0.818,  0.532, -0.140, -0.234,
                0.264,   1.168, -0.769,  0.551,  0.275,  0.256,  0.809,
               -0.296,   0.223, -0.112, -0.079, -0.375,  0.031, -0.108,
               -0.039,   0.982, -0.219, -0.040,  0.046, -0.037,  0.182, -0.085,
               -0.398,   0.011, -0.254,  0.225,  0.082, -0.316,  0.053,
               -0.168,  -1.822,  0.672, -0.135, -0.005, -0.129, -1.038, -0.529,
                1.188,  -0.187,  0.863, -0.192,  0.202,  0.599,  0.351,
               -0.839,   2.356, -0.721, -0.151,  0.113, -0.052,  0.705,  0.027,
               -0.074,   0.727,  0.482, -0.947, -0.120, -0.224,  0.272, -0.020,
               -0.540,   0.075,  0.478, -0.276,  0.281, -0.086,  0.030, -0.255,
               -0.075,  -0.052,  0.120, -0.061,  0.083,  0.085,
               -0.130,  -0.037, -0.055, -0.098, -0.061,  0.054,
                0.169,   0.290, -0.492, -0.117, -0.216, -0.571,
                0.313,   0.363,  0.112, -0.082, -0.018,  0.033,
                0.674,  -0.333, -0.067, -0.061, -0.186, -0.159,  0.333,
                0.305,   0.284, -0.035, -0.339,  0.096,  0.270, -0.190,
                0.078,  -0.419,  0.174, -0.235, -0.461,  0.104,  0.011],
    "TaS2" : [  0.336,   0.154,  0.070,  0.232,  0.0556, 0.070,  4.950,
               -9.444,  -9.532, -6.374, -5.375, -6.700, -0.779,
               -5.162,  -3.080, -4.074, -6.918, -4.175, -0.052,
               -0.045,   1.164,  0.403,  1.033, -0.609, -0.112,  0.183,
                0.534,   1.626,  0.549, -0.925, -0.631,  0.985,
                0.773,  -0.756,  0.190, -0.175,  0.390, -0.285,
                1.520,  -0.362, -1.187,  0.927, -0.168,  0.183,
               -1.791,   0.105,  0.511, -0.533,  0.134, -0.747,
                1.069,   1.094, -1.340,  1.150,  1.034, -0.336,  0.125,
                0.722,   1.674, -1.513,  0.807,  0.424,  0.219,  1.028,
               -0.965,   0.304, -0.360, -0.236, -0.336,  0.192, -0.107,
               -0.077,   0.762, -0.153, -0.076,  0.062, -0.067,  0.188, -0.205,
               -0.547,  -0.028, -0.313,  0.365,  0.162, -0.445,  0.147,
               -0.046,  -1.256,  0.396, -0.191, -0.039, -0.114, -1.608, -0.146,
                1.885,  -0.422,  1.480, -0.140,  0.377,  1.260,  0.389,
               -0.541,   1.854, -0.526, -0.286,  0.149, -0.175,  0.521,  0.137,
               -0.054,   1.128,  0.546, -1.544, -0.382, -0.446,  0.474,  0.203,
               -0.958,   0.350,  0.641, -0.312,  0.394, -0.141,  0.153, -0.451,
               -0.087,  -0.016,  0.095, -0.086,  0.088,  0.037,
               -0.125,  -0.013, -0.009, -0.153, -0.054,  0.119,
                0.334,   0.413, -0.607, -0.171, -0.477, -0.494,
                0.528,   0.368,  0.073, -0.006, -0.228, -0.220,
                0.709,  -0.473, -0.111, -0.193, -0.092,  0.006,  0.489,
                0.306,   0.249,  0.210, -0.452,  0.024,  0.227, -0.290,
                0.138,  -1.296,  0.305, -0.336, -0.956,  0.162, -0.003],
    "TaSe2": [  0.349,   0.166,  0.075,  0.232,  0.247,  0.070,  4.570,
               -8.582,  -8.767, -5.906, -5.034, -6.197, -0.636,
               -5.132,  -2.837, -4.568, -6.695, -4.368, -0.052,
               -0.033,   1.360,  0.255,  1.138, -0.463, -0.036,  0.198,
                0.447,   1.463,  0.511, -0.842, -0.559,  0.892,
                0.772,  -0.684,  0.186, -0.169,  0.432, -0.295,
                1.341,  -0.221, -1.033,  0.785, -0.189,  0.220,
               -1.513,   0.056,  0.526, -0.515,  0.141, -0.746,
                1.102,   1.197, -1.191,  1.002,  0.923, -0.116,  0.287,
                0.662,   1.460, -1.632,  0.670,  0.283,  0.180,  0.926,
               -1.137,   0.336, -0.430, -0.141, -0.398,  0.169, -0.092,
               -0.081,   0.842, -0.176, -0.080,  0.065, -0.085,  0.199, -0.140,
               -0.486,  -0.028, -0.297,  0.282,  0.121, -0.395,  0.116,
               -0.076,  -1.403,  0.438, -0.192, -0.030, -0.103, -1.394, -0.296,
                1.613,  -0.276,  1.335, -0.125,  0.341,  1.074,  0.372,
               -0.595,   2.025, -0.584, -0.320,  0.133, -0.243,  0.577,  0.130,
               -0.088,   1.031,  0.441, -1.260, -0.410, -0.431,  0.363,  0.218,
               -0.812,   0.372,  0.612, -0.272,  0.339, -0.144,  0.199, -0.399,
               -0.078,  -0.024,  0.102, -0.079,  0.076,  0.054,
               -0.115,  -0.014, -0.011, -0.144, -0.050,  0.112,
                0.276,   0.362, -0.614, -0.139, -0.447, -0.525,
                0.511,   0.400,  0.115, -0.037, -0.232, -0.184,
                0.668,  -0.427, -0.117, -0.184, -0.049, -0.063,  0.438,
                0.318,   0.228,  0.174, -0.426,  0.010,  0.232, -0.270,
                0.159,  -1.281,  0.278, -0.401, -0.979,  0.179, -0.013],
    "TaTe2": [  0.364,   0.185,  0.086,  0.232,  0.512,  0.000,  4.320,
               -6.595,  -7.041, -4.443, -3.706, -4.753, -0.511,
               -4.924,  -2.251, -4.210, -5.945, -4.199, -0.275,
               -0.349,   1.262,  0.096,  0.979, -0.032,  0.009,  0.205,
                0.293,   1.252,  0.508, -0.766, -0.450,  0.699, 
                0.677,  -0.575,  0.179, -0.100,  0.428, -0.228,
                1.695,  -0.049, -0.779,  0.709, -0.744,  0.621,
               -1.274,  -0.076,  0.551, -0.462,  0.232, -0.742,
                0.805,   0.952, -1.119,  0.889,  0.665,  0.091,  0.278,
                0.552,   1.094, -1.380,  0.492,  0.083,  0.143,  0.648,
               -0.733,   0.238, -0.300, -0.212, -0.407,  0.076, -0.028,
               -0.026,   0.989, -0.200, -0.071,  0.072, -0.066,  0.229, -0.079,
               -0.453,  -0.007, -0.304,  0.222,  0.074, -0.368,  0.063,
               -0.197,  -1.744,  0.534, -0.138,  0.028, -0.176, -1.389, -0.264,
                1.387,  -0.291,  1.255, -0.061,  0.604,  0.882,  0.649,
               -0.798,   2.371, -0.592, -0.246,  0.101, -0.150,  0.731,  0.129,
               -0.140,   1.000,  0.472, -1.187, -0.413, -0.381,  0.182, -0.028,
               -0.684,   0.262,  0.516, -0.339,  0.248, -0.137,  0.182, -0.220,
               -0.082,  -0.067,  0.109, -0.098,  0.131,  0.073,
               -0.163,  -0.025, -0.020, -0.123, -0.005,  0.116,
                0.119,   0.373, -0.491, -0.257, -0.321, -0.681,
                0.414,   0.389,  0.086, -0.095, -0.233, -0.118,
                0.708,  -0.236, -0.074, -0.121, -0.096, -0.138,  0.457,
                0.376,   0.271, -0.053, -0.423,  0.004,  0.293, -0.261,
                0.174,  -0.934,  0.250, -0.365, -0.791,  0.185,  0.066]
}


class Group9Tmd11BandStrain:
    r"""Monolayer of a group 9 TMD using the second nearest-neighbor 11-band model

        """
    def __init__(self, **kwargs):
        # make a list of all the parameters we import during the creation of the various matrices for the hoppings from
        # the table from Fang's papers
        self._name = "TiS2"
        self._lat4 = False
        self._phi = 2 * np.pi / 3
        # defaults; also needed to import the matrices from Fang
        self.params = _default_11band_strain_params
        self._rt3 = np.sqrt(3)
        self.soc = False
        self.soc_eo_flip = True
        self.soc_polarized = False
        self.sz = 1.
        self._ur_m = self.ur_m()
        self._ur_c = self.ur_c()
        # see if there are parameters to overwrite
        # make the lattice vectors
        # add other default parameters
        # see if there are more parameters to overwrite; also the matrices from Fang could be overwritten
        [setattr(self, var, kwargs[var]) for var in [*kwargs]]
    
    def ur_m(self, phi=None):
        if phi is None:
            phi = self._phi
        return np.array([
            [np.cos(2 * phi),           0,-np.sin(2 * phi),            0, 0],
            [              0, np.cos(phi),               0, -np.sin(phi), 0],
            [np.sin(2 * phi),           0, np.cos(2 * phi),            0, 0],
            [              0, np.sin(phi),               0,  np.cos(phi), 0],
            [              0,           0,               0,            0, 1]
                        ])
    
    def ur_c(self, phi=None):
        if phi is None:
            phi = self._phi
        return np.array([[ np.cos(phi), np.sin(phi), 0],
                         [-np.sin(phi), np.cos(phi), 0],
                         [           0,           0, 1]])
    
    @property
    def params(self):
        return self.__params

    @params.setter
    def params(self, params):
        self.__name_list = [*params]
        self.__params = params
        self.name = [*params][0] if self.name not in [*params] else self.name

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        if name not in self.__name_list:
            print("The name %s is not in the params-list" % name)
        else:
            self._name = name
            self._generate_matrices()

    @property
    def lat4(self):
        return self._lat4

    @lat4.setter
    def lat4(self, lat4):
        self._lat4 = lat4

    @property
    def a1(self):
        return np.array([1, 0]) * self.a

    @property
    def a2(self):
        return (np.array([0, self._rt3]) if self.lat4 else np.array([-1 / 2, self._rt3 / 2])) * self.a

    @property
    def soc_doubled_ham(self):
        return not self.soc_polarized if self.soc else False

    @property
    def soc_eo_flip_used(self):
        return self.soc and self.soc_eo_flip and not self.soc_polarized

    @property
    def n_valence_band(self):
        return 11 if self.soc_doubled_ham else 5

    @property
    def n_bands(self):
        return 22 if self.soc_doubled_ham else 11

    def _generate_matrices(self):
        # generate the matrices from Fang
        # import data
        [       a,     d_0,    d_1, lamb_m, lamb_c,    d_e,  d_phi,
            eps_0,   eps_1,  eps_2,  eps_3,  eps_4,  eps_5,
            a_0_0,   a_1_0,  a_2_0,  a_3_0,  a_4_0,  a_5_0,
            b_0_0,   b_1_0,  b_2_0,  b_3_0,  b_4_0,  b_5_0,  b_6_0,
            t_0_1,   t_1_1,  t_2_1,  t_3_1,  t_4_1,  t_5_1,
            t_6_1,   t_7_1,  t_8_1,  t_9_1, t_10_1, t_11_1,
            a_0_1,   a_1_1,  a_2_1,  a_3_1,  a_4_1,  a_5_1,
            a_6_1,   a_7_1,  a_8_1,  a_9_1, a_10_1, a_11_1,
            b_0_1,   b_1_1,  b_2_1,  b_3_1,  b_4_1,  b_5_1,  b_6_1,
            b_7_1,   b_8_1,  b_9_1, b_10_1, b_11_1, b_12_1, b_13_1,
           b_14_1,  b_15_1, b_16_1, b_17_1, b_18_1, b_19_1, b_20_1,
            t_0_2,   t_1_2,  t_2_2,  t_3_2,  t_4_2,  t_5_2,  t_6_2,  t_7_2,
            t_8_2,   t_9_2, t_10_2, t_11_2, t_12_2, t_13_2, t_14_2,
            a_0_2,   a_1_2,  a_2_2,  a_3_2,  a_4_2,  a_5_2,  a_6_2,  a_7_2,
            a_8_2,   a_9_2, a_10_2, a_11_2, a_12_2, a_13_2, a_14_2,
            b_0_2,   b_1_2,  b_2_2,  b_3_2,  b_4_2,  b_5_2,  b_6_2,  b_7_2,
            b_8_2,   b_9_2, b_10_2, b_11_2, b_12_2, b_13_2, b_14_2, b_15_2,
           b_16_2,  b_17_2, b_18_2, b_19_2, b_20_2, b_21_2, b_22_2, b_23_2,
            t_0_3,   t_1_3,  t_2_3,  t_3_3,  t_4_3,  t_5_3,
            t_6_3,   t_7_3,  t_8_3,  t_9_3, t_10_3, t_11_3,
            a_0_3,   a_1_3,  a_2_3,  a_3_3,  a_4_3,  a_5_3,
            a_6_3,   a_7_3,  a_8_3,  a_9_3, a_10_3, a_11_3,
            b_0_3,   b_1_3,  b_2_3,  b_3_3,  b_4_3,  b_5_3,  b_6_3,
            b_7_3,   b_8_3,  b_9_3, b_10_3, b_11_3, b_12_3, b_13_3,
           b_14_3,  b_15_3, b_16_3, b_17_3, b_18_3, b_19_3, b_20_3
        ] = self.params[self.name]

        # make functions for various matrices
        def matrix_0_c(e_0, e_1, a_0_0, a_1_0, b_0_0, b_1_0):
            return np.array([np.diag([e_0, e_0, e_1]),
                             np.diag([a_0_0, a_0_0, a_1_0]),
                             [[b_0_0, 0, b_1_0], [0, -b_0_0, 0], [b_1_0, 0, 0]],
                             [[0, b_0_0, 0], [b_0_0, 0, -b_1_0], [0, -b_1_0, 0]]])

        def matrix_0_m(e_2, e_3, e_4, e_5,
                       a_2_0, a_3_0, a_4_0, a_5_0,
                       b_2_0, b_3_0, b_4_0, b_5_0, b_6_0):
            return np.array([block_diag([[e_2, e_5], [e_5, e_3]],
                                        [[e_2, -e_5], [-e_5, e_3]],
                                        [[e_4]]),
                             block_diag([[a_2_0, a_5_0], [a_5_0, a_3_0]],
                                        [[a_2_0, -a_5_0], [-a_5_0, a_3_0]],
                                        [[a_4_0]]),
                             block_diag([[b_2_0, b_4_0], [b_4_0, b_3_0]],
                                        [[-b_2_0, b_4_0, b_5_0], [b_4_0, -b_3_0, b_6_0], [b_5_0, b_6_0, 0]]),
                             [[0, 0, b_2_0, -b_4_0, b_5_0],
                              [0, 0, b_4_0, -b_3_0, -b_6_0],
                              [b_2_0, b_4_0, 0, 0, 0],
                              [-b_4_0, -b_3_0, 0, 0, 0],
                              [b_5_0, -b_6_0, 0, 0, 0]]
                            ])
        
        def matrix_n_m(t_0_1, t_1_1, t_2_1, t_3_1, t_4_1, t_5_1, t_6_1, t_7_1,
                       a_0_1, a_1_1, a_2_1, a_3_1, a_4_1, a_5_1, a_6_1, a_7_1,
                       b_0_1, b_1_1, b_2_1, b_3_1, b_4_1, b_5_1, b_6_1, b_7_1,
                       b_8_1, b_9_1, b_10_1, b_11_1, b_12_1, b_13_1, b_14_1):
            return np.array([[[0, 0, t_0_1, t_1_1, t_2_1], [t_3_1, t_4_1, 0, 0, 0], [0, 0, t_5_1, t_6_1, t_7_1]],
                             [[0, 0, a_0_1, a_1_1, a_2_1], [a_3_1, a_4_1, 0, 0, 0], [0, 0, a_5_1, a_6_1, a_7_1]],
                             [[0, 0, b_0_1, b_1_1, b_2_1], [b_3_1, b_4_1, 0, 0, 0], [0, 0, b_5_1, b_6_1, b_7_1]],
                             [[b_8_1, b_9_1, 0, 0, 0], [0, 0, b_10_1, b_11_1, b_12_1], [b_13_1, b_14_1, 0, 0, 0]]
                            ])
        
        def matrix_n_c(t_8_1, t_9_1, t_10_1, t_11_1,
                       a_8_1, a_9_1, a_10_1, a_11_1,
                       b_15_1, b_16_1, b_17_1, b_18_1, b_19_1, b_20_1):
            return np.array([[[t_8_1, 0, t_11_1], [0, t_9_1, 0], [t_11_1, 0, t_10_1]],
                             [[a_8_1, 0, a_11_1], [0, a_9_1, 0], [a_11_1, 0, a_10_1]],
                             [[b_15_1, 0, b_18_1], [0, b_16_1, 0], [b_18_1, 0, b_17_1]],
                             [[0, b_19_1, 0], [b_19_1, 0, b_20_1], [0, b_20_1, 0]]
                            ])
        
        def matrix_2_c(t_0_2, t_1_2, t_2_2, t_3_2, t_4_2, t_5_2,
                       a_0_2, a_1_2, a_2_2, a_3_2, a_4_2, a_5_2,
                       b_0_2, b_1_2, b_2_2, b_3_2, b_4_2, b_5_2, b_6_2, b_7_2, b_8_2):
            return np.array([[[t_0_2, t_3_2, t_4_2], [-t_3_2, t_1_2, t_5_2], [t_4_2, -t_5_2, t_2_2]],
                             [[a_0_2, a_3_2, a_4_2], [-a_3_2, a_1_2, a_5_2], [a_4_2, -a_5_2, a_2_2]],
                             [[b_0_2, b_3_2, b_4_2], [-b_3_2, b_1_2, b_5_2], [b_4_2, -b_5_2, b_2_2]],
                             [[0, b_6_2, b_7_2], [b_6_2, 0, b_8_2], [-b_7_2, b_8_2, 0]]
                            ])
        def matrix_2_m(t_6_2, t_7_2, t_8_2, t_9_2, t_10_2, t_11_2, t_12_2, t_13_2, t_14_2,
                       a_6_2, a_7_2, a_8_2, a_9_2, a_10_2, a_11_2, a_12_2, a_13_2, a_14_2,
                       b_9_2, b_10_2, b_11_2, b_12_2, b_13_2, b_14_2, b_15_2, b_16_2, b_17_2,
                       b_18_2, b_19_2, b_20_2, b_21_2, b_22_2, b_23_2):
            return np.array([block_diag([[t_6_2, t_11_2],[t_11_2, t_7_2]], [[t_8_2, t_12_2, t_13_2], [t_12_2, t_9_2, t_14_2], [t_13_2, t_14_2, t_10_2]]),
                             block_diag([[a_6_2, a_11_2],[a_11_2, a_7_2]], [[a_8_2, a_12_2, a_13_2], [a_12_2, a_9_2, a_14_2], [a_13_2, a_14_2, a_10_2]]),
                             block_diag([[b_9_2, b_14_2],[b_14_2, b_10_2]], [[b_11_2, b_15_2, b_16_2], [b_15_2, b_12_2, b_17_2], [b_16_2, b_17_2, b_13_2]]),
                             [[0, 0, b_18_2, b_19_2, b_20_2],
                              [0, 0, b_21_2, b_22_2, b_23_2],
                              [b_18_2, b_21_2, 0, 0, 0],
                              [b_19_2, b_22_2, 0, 0, 0],
                              [b_20_2, b_23_2, 0, 0, 0]]
                            ])
        
        # make the matrices
        h_0_m = matrix_0_m(eps_2, eps_3, eps_4, eps_5,
                           a_2_0, a_3_0, a_4_0, a_5_0,
                           b_2_0, b_3_0, b_4_0, b_5_0, b_6_0)
        h_0_c = matrix_0_c(eps_0, eps_1, a_0_0, a_1_0, b_0_0, b_1_0)
        h_0_x = +h_0_c
        h_1_m = matrix_n_m(t_0_1, t_1_1, t_2_1, t_3_1, t_4_1, t_5_1, t_6_1, t_7_1, #M to X1
                           a_0_1, a_1_1, a_2_1, a_3_1, a_4_1, a_5_1, a_6_1, a_7_1,
                           b_0_1, b_1_1, b_2_1, b_3_1, b_4_1, b_5_1, b_6_1, b_7_1,
                           b_8_1, b_9_1, b_10_1, b_11_1, b_12_1, b_13_1, b_14_1)
        h_1_x = -h_1_m #M to X2
        h_1_c = matrix_n_c(t_8_1, t_9_1, t_10_1, t_11_1, #X1 to X2
                           a_8_1, a_9_1, a_10_1, a_11_1,
                           b_15_1, b_16_1, b_17_1, b_18_1, b_19_1, b_20_1)
        h_2_m = matrix_2_m(t_6_2, t_7_2, t_8_2, t_9_2, t_10_2, t_11_2, t_12_2, t_13_2, t_14_2,
                           a_6_2, a_7_2, a_8_2, a_9_2, a_10_2, a_11_2, a_12_2, a_13_2, a_14_2,
                           b_9_2, b_10_2, b_11_2, b_12_2, b_13_2, b_14_2, b_15_2, b_16_2, b_17_2,
                           b_18_2, b_19_2, b_20_2, b_21_2, b_22_2, b_23_2)
        h_2_c = matrix_2_c(t_0_2, t_1_2, t_2_2, t_3_2, t_4_2, t_5_2,
                           a_0_2, a_1_2, a_2_2, a_3_2, a_4_2, a_5_2,
                           b_0_2, b_1_2, b_2_2, b_3_2, b_4_2, b_5_2, b_6_2, b_7_2, b_8_2)
        h_2_x = +h_2_c.swapaxes(1, 2)
        h_3_m = matrix_n_m(t_0_3, t_1_3, t_2_3, t_3_3, t_4_3, t_5_3, t_6_3, t_7_3,
                           a_0_3, a_1_3, a_2_3, a_3_3, a_4_3, a_5_3, a_6_3, a_7_3,
                           b_0_3, b_1_3, b_2_3, b_3_3, b_4_3, b_5_3, b_6_3, b_7_3,
                           b_8_3, b_9_3, b_10_3, b_11_3, b_12_3, b_13_3, b_14_3)
        h_3_x = -h_3_m
        h_3_c = matrix_n_c(t_8_3, t_9_3, t_10_3, t_11_3,
                           a_8_3, a_9_3, a_10_3, a_11_3,
                           b_15_3, b_16_3, b_17_3, b_18_3, b_19_3, b_20_3)

        keys = ["h_0_m", "h_0_c", "h_0_x",
                "h_1_m", "h_1_c", "h_1_x",
                "h_2_m", "h_2_c", "h_2_x",
                "h_3_m", "h_3_c", "h_3_x",
                "a", "d_0", "d_1", "lamb_m", "lamb_c", "d_e", "d_phi"]
        values = [h_0_m, h_0_c, h_0_x,
                  h_1_m, h_1_c, h_1_x,
                  h_2_m, h_2_c, h_2_x,
                  h_3_m, h_3_c, h_3_x,
                  a, d_0, d_1, lamb_m, lamb_c, d_e, d_phi]
        [setattr(self, key, value) for key, value in zip(keys, values)]

    def lattice(self):
        def ham(h, ur_l, ur_r):
            return h, ur_l.T.dot(h.dot(ur_r)), ur_l.dot(h.dot(ur_r.T))
        lat = pb.Lattice(a1=self.a1, a2=self.a2)

        metal_name, chalcogenide_name = re.findall("[A-Z][a-z]*", self.name)

        def h_0_m_sz(sz):
            return self.h_0_m[0] + sz * self.lamb_m * 1j * np.array([[0, 0, -1, 0, 0],
                                                                     [0, 0, 0, .5, 0],
                                                                     [1, 0, 0, 0, 0],
                                                                     [0, -.5, 0, 0, 0],
                                                                     [0, 0, 0, 0, 0]])

        def h_0_c_sz(sz):
            return self.h_0_c[0] + sz * self.lamb_c * 1j * np.array([[0, -1/2, 0], [1/2, 0, 0], [0, 0, 0]])

        def h_0_x_sz(sz):
            return self.h_0_x[0] + sz * self.lamb_c * 1j * np.array([[0, -1/2, 0], [1/2, 0, 0], [0, 0, 0]])

        if self.soc:
            if self.soc_polarized:
                h_0_m = h_0_m_sz(self.sz)
                h_0_c = h_0_c_sz(self.sz)
                h_0_x = h_0_x_sz(self.sz)
            else:
                soc_part_m = np.zeros((5, 5)) * 1j
                soc_part_c = np.zeros((3, 3)) * 1j
                soc_part_x = np.zeros((3, 3)) * 1j
                """
                if self.soc_eo_flip:
                    soc_part_m[:2, 2:] = self.sz * self.lamb_m * np.array(
                        [[1j / 2, -1 / 2, self._rt3 / 2],
                         [-1 / 2, -1j / 2, -1j / 2 * self._rt3]])
                    soc_part_m[2:, :2] = -soc_part_m[:2, 2:].T

                    soc_part_c[:3, 3:] = self.sz * self.lamb_c * np.array(
                        [[0, 0, 1/2],
                         [0, 0, -1j/2],
                         [-1/2, 1j / 2, 0]])
                    soc_part_c[3:, :3] = -soc_part_c[:3, 3:].T
            """
                h_0_m = np.concatenate((np.concatenate((h_0_m_sz(self.sz), soc_part_m), axis=1),
                                        np.concatenate((soc_part_m.conj().T, h_0_m_sz(-self.sz)), axis=1)), axis=0)
                h_0_c = np.concatenate((np.concatenate((h_0_c_sz(self.sz), soc_part_c), axis=1),
                                        np.concatenate((soc_part_c.conj().T, h_0_c_sz(-self.sz)), axis=1)), axis=0)
                h_0_x = np.concatenate((np.concatenate((h_0_x_sz(self.sz), soc_part_x), axis=1),
                                        np.concatenate((soc_part_x.conj().T, h_0_x_sz(-self.sz)), axis=1)), axis=0)
        else:
            h_0_m = h_0_m_sz(0.)
            h_0_c = h_0_c_sz(0.)
            h_0_x = h_0_x_sz(0.)

        lat.add_one_sublattice(metal_name, [0, 0], h_0_m.T)
        lat.add_one_sublattice(chalcogenide_name, [self.a/2, self.a*self._rt3/6], h_0_c.T)
        lat.add_one_sublattice(chalcogenide_name + "x", [0, self.a*self._rt3/3], h_0_x.T)

        if self.lat4:
            lat.add_aliases((metal_name + "2", metal_name, [self.a/2, self.a*self._rt3/2]),
                            (chalcogenide_name + "2", chalcogenide_name, [0, self.a*2*self._rt3/3]),
                            (chalcogenide_name + "x2", chalcogenide_name + "x", [self.a/2, self.a*5*self._rt3/6]))

        (h_1_m_1, h_1_m_2, h_1_m_3) = ham(self.h_1_m[0], self._ur_c, self._ur_m)
        (h_1_x_1, h_1_x_2, h_1_x_3) = ham(self.h_1_x[0], self._ur_c, self._ur_m)
        (h_1_c_1, h_1_c_2, h_1_c_3) = ham(self.h_1_c[0], self._ur_c, self._ur_c)
        (h_2_m_1, h_2_m_2, h_2_m_3) = ham(self.h_2_m[0], self._ur_m, self._ur_m)
        (h_2_c_1, h_2_c_2, h_2_c_3) = ham(self.h_2_c[0], self._ur_c, self._ur_c)
        (h_2_x_1, h_2_x_2, h_2_x_3) = ham(self.h_2_x[0], self._ur_c, self._ur_c)
        (h_3_m_1, h_3_m_2, h_3_m_3) = ham(self.h_3_m[0], self._ur_c, self._ur_m)
        (h_3_x_1, h_3_x_2, h_3_x_3) = ham(self.h_3_x[0], self._ur_c, self._ur_m)
        (h_3_c_1, h_3_c_2, h_3_c_3) = ham(self.h_3_c[0], self._ur_c, self._ur_c)

        if self.soc_doubled_ham:
            h_1_m_1 = np.kron(np.eye(2), h_1_m_1)
            h_1_m_2 = np.kron(np.eye(2), h_1_m_2)
            h_1_m_3 = np.kron(np.eye(2), h_1_m_3)
            h_1_x_1 = np.kron(np.eye(2), h_1_x_1)
            h_1_x_2 = np.kron(np.eye(2), h_1_x_2)
            h_1_x_3 = np.kron(np.eye(2), h_1_x_3)
            h_1_c_1 = np.kron(np.eye(2), h_1_c_1)
            h_1_c_2 = np.kron(np.eye(2), h_1_c_2)
            h_1_c_3 = np.kron(np.eye(2), h_1_c_3)
            h_2_m_1 = np.kron(np.eye(2), h_2_m_1)
            h_2_m_2 = np.kron(np.eye(2), h_2_m_2)
            h_2_m_3 = np.kron(np.eye(2), h_2_m_3)
            h_2_c_1 = np.kron(np.eye(2), h_2_c_1)
            h_2_c_2 = np.kron(np.eye(2), h_2_c_2)
            h_2_c_3 = np.kron(np.eye(2), h_2_c_3)
            h_2_x_1 = np.kron(np.eye(2), h_2_x_1)
            h_2_x_2 = np.kron(np.eye(2), h_2_x_2)
            h_2_x_3 = np.kron(np.eye(2), h_2_x_3)
            h_3_m_1 = np.kron(np.eye(2), h_3_m_1)
            h_3_m_2 = np.kron(np.eye(2), h_3_m_2)
            h_3_m_3 = np.kron(np.eye(2), h_3_m_3)
            h_3_x_1 = np.kron(np.eye(2), h_3_x_1)
            h_3_x_2 = np.kron(np.eye(2), h_3_x_2)
            h_3_x_3 = np.kron(np.eye(2), h_3_x_3)
            h_3_c_1 = np.kron(np.eye(2), h_3_c_1)
            h_3_c_2 = np.kron(np.eye(2), h_3_c_2)
            h_3_c_3 = np.kron(np.eye(2), h_3_c_3)

        lat.register_hopping_energies({
            'h_1_m_1': h_1_m_1.T,
            'h_1_m_2': h_1_m_2.T,
            'h_1_m_3': h_1_m_3.T,
            'h_1_x_1': h_1_x_1.T,
            'h_1_x_2': h_1_x_2.T,
            'h_1_x_3': h_1_x_3.T,
            'h_1_c_1': h_1_c_1.T,
            'h_1_c_2': h_1_c_2.T,
            'h_1_c_3': h_1_c_3.T,
            'h_2_m_1': h_2_m_1.T,
            'h_2_c_1': h_2_c_1.T,
            'h_2_x_1': h_2_x_1.T,
            'h_2_m_2': h_2_m_2.T,
            'h_2_c_2': h_2_c_2.T,
            'h_2_x_2': h_2_x_2.T,
            'h_2_m_3': h_2_m_3.T,
            'h_2_c_3': h_2_c_3.T,
            'h_2_x_3': h_2_x_3.T,
            'h_3_m_1': h_3_m_1.T,
            'h_3_m_2': h_3_m_2.T,
            'h_3_m_3': h_3_m_3.T,
            'h_3_x_1': h_3_x_1.T,
            'h_3_x_2': h_3_x_2.T,
            'h_3_x_3': h_3_x_3.T,
            'h_3_c_1': h_3_c_1.T,
            'h_3_c_2': h_3_c_2.T,
            'h_3_c_3': h_3_c_3.T
        })

        m, c = metal_name, chalcogenide_name
        x = c + "x"

        if not self.lat4:
            lat.add_hoppings(([0, 0], m, c, 'h_1_m_1'),
                             ([-1, 0], m, c, 'h_1_m_2'),
                             ([-1, -1], m, c, 'h_1_m_3'),
                             ([-1, -1], m, x, 'h_1_x_1'),
                             ([0, -1], m, x, 'h_1_x_2'),
                             ([0, 0], m, x, 'h_1_x_3'),
                             ([1, 0], c, x, 'h_1_c_1'),
                             ([0, 0], c, x, 'h_1_c_2'),
                             ([0, -1], c, x, 'h_1_c_3'),
                             ([0, 1], m, m, 'h_2_m_1'),
                             ([0, 1], c, c, 'h_2_c_1'),
                             ([0, 1], x, x, 'h_2_x_1'),
                             ([-1, -1], m, m, 'h_2_m_2'),
                             ([-1, -1], c, c, 'h_2_c_2'),
                             ([-1, -1], x, x, 'h_2_x_2'),
                             ([1, 0], m, m, 'h_2_m_3'),
                             ([1, 0], c, c, 'h_2_c_3'),
                             ([1, 0], x, x, 'h_2_x_3'),
                             ([-2, -1], m, c, 'h_3_m_1'),
                             ([0, -1], m, c, 'h_3_m_2'),
                             ([0, 1], m, c, 'h_3_m_3'),
                             ([1, 0], m, x, 'h_3_x_1'),
                             ([-1, 0], m, x, 'h_3_x_2'),
                             ([-1, -2], m, x, 'h_3_x_3'),
                             ([-1, -1], c, x, 'h_3_c_1'),
                             ([1, -1], c, x, 'h_3_c_2'),
                             ([1, 1], c, x, 'h_3_c_3'))
        else:
            m1 = m
            c1 = c
            x1 = c + "x"
            m2 = m + "2"
            c2 = c + "2"
            x2 = c + "x2"
            lat.add_hoppings(([0, 0], m1, c1, 'h_1_m_1'),
                             ([1, 0], m2, c2, 'h_1_m_1'),
                             ([-1, 0], m1, c1, 'h_1_m_2'),
                             ([0, 0], m2, c2, 'h_1_m_2'),
                             ([0, -1], m1, c2, 'h_1_m_3'),
                             ([0, 0], m2, c1, 'h_1_m_3'),
                             ([-1, -1], m1, x2, 'h_1_x_1'),
                             ([0, 0], m2, x1, 'h_1_x_1'),
                             ([0, -1], m1, x2, 'h_1_x_2'),
                             ([1, 0], m2, x1, 'h_1_x_2'),
                             ([0, 0], m1, x1, 'h_1_x_3'),
                             ([0, 0], m2, x2, 'h_1_x_3'),
                             ([1, 0], c1, x1, 'h_1_c_1'),
                             ([0, 0], c2, x2, 'h_1_c_1'),
                             ([0, 0], c1, x1, 'h_1_c_2'),
                             ([-1, 0], c2, x2, 'h_1_c_2'),
                             ([0, -1], c1, x2, 'h_1_c_3'),
                             ([0, 0], c2, x1, 'h_1_c_3'),
                             ([-1, 0], m1, m2, 'h_2_m_1'),
                             ([0, 1], m2, m1, 'h_2_m_1'),
                             ([-1, -1], m1, m2, 'h_2_m_2'),
                             ([0, 0], m2, m1, 'h_2_m_2'),
                             ([1, 0], m1, m1, 'h_2_m_3'),
                             ([1, 0], m2, m2, 'h_2_m_3'),
                             ([0, 0], c1, c2, 'h_2_c_1'),
                             ([-1, 1], c2, c1, 'h_2_c_1'),
                             ([0, -1], c1, c2, 'h_2_c_2'),
                             ([-1, 0], c2, c1, 'h_2_c_2'),
                             ([1, 0], c1, c1, 'h_2_c_3'),
                             ([1, 0], c2, c2, 'h_2_c_3'),
                             ([-1, 0], x1, x2, 'h_2_x_1'),
                             ([0, 1], x2, x1, 'h_2_x_1'),
                             ([-1, -1], x1, x2, 'h_2_x_2'),
                             ([0, 0], x2, x1, 'h_2_x_2'),
                             ([1, 0], x1, x1, 'h_2_x_3'),
                             ([1, 0], x2, x2, 'h_2_x_3'),
                             ([-1, -1], m1, c2, 'h_3_m_1'),
                             ([-1, 0], m2, c1, 'h_3_m_1'),
                             ([1, -1], m1, c2, 'h_3_m_2'),
                             ([1, 0], m2, c1, 'h_3_m_2'),
                             ([0, 0], m1, c2, 'h_3_m_3'),
                             ([0, 1], m2, c1, 'h_3_m_3'),
                             ([1, 0], m1, x1, 'h_3_x_1'),
                             ([1, 0], m2, x2, 'h_3_x_1'),
                             ([-1, 0], m1, x1, 'h_3_x_2'),
                             ([-1, 0], m2, x2, 'h_3_x_2'),
                             ([0, -1], m1, x1, 'h_3_x_3'),
                             ([0, -1], m2, x2, 'h_3_x_3'),
                             ([-1, -1], c1, x2, 'h_3_c_1'),
                             ([-1, 0], c2, x1, 'h_3_c_1'),
                             ([1, -1], c1, x2, 'h_3_c_2'),
                             ([1, 0], c2, x1, 'h_3_c_2'),
                             ([0, 0], c1, x2, 'h_3_c_3'),
                             ([0, 1], c2, x1, 'h_3_c_3'))
        return lat

    def _stitching(self, u_local, h, shape=None, ur_l=None, ur_r=None):
        if u_local.ndim == 1:
            if ur_l is None:
                ur_l = np.eye(h.shape[1])
            if ur_r is None:
                ur_r = np.eye(h.shape[2])
            output = np.dot(ur_l.T, np.dot(np.dot(h[1:].T, u_local).T, ur_r))
            if self.soc_doubled_ham:
                output = np.kron(np.eye(2), output)
            return output
        else:
            if u_local.shape[1] == 0:
                return 0 if shape is None else np.zeros([0, shape[1], shape[2]])
            return np.array([self._stitching(u_i, h, shape, ur_l ,ur_r) for u_i in u_local.T])

    def straining_hopping(self, uxx, uyy, uxy, hop_id=None, shape=None):
        len_bool = True
        if not hasattr(uxx, "__len__"):
            uxx = np.array([uxx])
            uyy = np.array([uyy])
            uxy = np.array([uxy])
            len_bool = False
        rt3 = self._rt3
        u = np.array([uxx + uyy, uxx - uyy, 2 * uxy])
        ur_1 = np.array([[1, 0, 0], [0, -1/2, -rt3/2], [0, rt3/2, -1/2]])
        ur_2 = ur_1.dot(ur_1)
        if len_bool:
            hopping = np.zeros(shape)
            if hop_id == 'h_1_m_1':
                hopping = self._stitching(u, self.h_1_m, shape)
            elif hop_id == 'h_1_m_2':
                hopping = self._stitching(ur_1.dot(u), self.h_1_m, shape, self._ur_c, self._ur_m)
            elif hop_id == 'h_1_m_3':
                hopping = self._stitching(ur_2.dot(u), self.h_1_m, shape, self._ur_c.T, self._ur_m.T)
            elif hop_id == 'h_1_x_1':
                hopping = self._stitching(u, self.h_1_x, shape)
            elif hop_id == 'h_1_x_2':
                hopping = self._stitching(ur_1.dot(u), self.h_1_x, shape, self._ur_c, self._ur_m)
            elif hop_id == 'h_1_x_3':
                hopping = self._stitching(ur_2.dot(u), self.h_1_x, shape, self._ur_c.T, self._ur_m.T)
            elif hop_id == 'h_1_c_1':
                hopping = self._stitching(u, self.h_1_c, shape)
            elif hop_id == 'h_1_c_2':
                hopping = self._stitching(ur_1.dot(u), self.h_1_c, shape, self._ur_c, self._ur_c)
            elif hop_id == 'h_1_c_3':
                hopping = self._stitching(ur_2.dot(u), self.h_1_c, shape, self._ur_c.T, self._ur_c.T)
            elif hop_id == 'h_2_m_1':
                hopping = self._stitching(u, self.h_2_m, shape)
            elif hop_id == 'h_2_m_2':
                hopping = self._stitching(ur_1.dot(u), self.h_2_m, shape, self._ur_m, self._ur_m)
            elif hop_id == 'h_2_m_3':
                hopping = self._stitching(ur_2.dot(u), self.h_2_m, shape, self._ur_m.T, self._ur_m.T)
            elif hop_id == 'h_2_c_1':
                hopping = self._stitching(u, self.h_2_c, shape)
            elif hop_id == 'h_2_c_2':
                hopping = self._stitching(ur_1.dot(u), self.h_2_c, shape, self._ur_c, self._ur_c)
            elif hop_id == 'h_2_c_3':
                hopping = self._stitching(ur_2.dot(u), self.h_2_c, shape, self._ur_c.T, self._ur_c.T)
            elif hop_id == 'h_2_x_1':
                hopping = self._stitching(u, self.h_2_x, shape)
            elif hop_id == 'h_2_x_2':
                hopping = self._stitching(ur_1.dot(u), self.h_2_x, shape, self._ur_c, self._ur_c)
            elif hop_id == 'h_2_x_3':
                hopping = self._stitching(ur_2.dot(u), self.h_2_x, shape, self._ur_c.T, self._ur_c.T)
            elif hop_id == 'h_3_m_1':
                hopping = self._stitching(u, self.h_3_m, shape)
            elif hop_id == 'h_3_m_2':
                hopping = self._stitching(ur_1.dot(u), self.h_3_m, shape, self._ur_c, self._ur_m)
            elif hop_id == 'h_3_m_3':
                hopping = self._stitching(ur_2.dot(u), self.h_3_m, shape, self._ur_c.T, self._ur_m.T)
            elif hop_id == 'h_3_x_1':
                hopping = self._stitching(u, self.h_3_x, shape)
            elif hop_id == 'h_3_x_2':
                hopping = self._stitching(ur_1.dot(u), self.h_3_x, shape, self._ur_c, self._ur_m)
            elif hop_id == 'h_3_x_3':
                hopping = self._stitching(ur_2.dot(u), self.h_3_x, shape, self._ur_c.T, self._ur_m.T)
            elif hop_id == 'h_3_c_1':
                hopping = self._stitching(u, self.h_3_c, shape)
            elif hop_id == 'h_3_c_2':
                hopping = self._stitching(ur_1.dot(u), self.h_3_c, shape, self._ur_c, self._ur_c)
            elif hop_id == 'h_3_c_3':
                hopping = self._stitching(ur_2.dot(u), self.h_3_c, shape, self._ur_c.T, self._ur_c.T)
            return hopping.swapaxes(1, 2)
        else:
            hopping = {
                'h_1_m_1': self.straining_hopping(uxx, uyy, uxy, 'h_1_m_1', (1, 3, 5)),
                'h_1_m_2': self.straining_hopping(uxx, uyy, uxy, 'h_1_m_2', (1, 3, 5)),
                'h_1_m_3': self.straining_hopping(uxx, uyy, uxy, 'h_1_m_3', (1, 3, 5)),
                'h_1_x_1': self.straining_hopping(uxx, uyy, uxy, 'h_1_x_1', (1, 3, 5)),
                'h_1_x_2': self.straining_hopping(uxx, uyy, uxy, 'h_1_x_2', (1, 3, 5)),
                'h_1_x_3': self.straining_hopping(uxx, uyy, uxy, 'h_1_x_3', (1, 3, 5)),
                'h_1_c_1': self.straining_hopping(uxx, uyy, uxy, 'h_1_c_1', (1, 3, 3)),
                'h_1_c_2': self.straining_hopping(uxx, uyy, uxy, 'h_1_c_2', (1, 3, 3)),
                'h_1_c_3': self.straining_hopping(uxx, uyy, uxy, 'h_1_c_3', (1, 3, 3)),
                'h_2_m_1': self.straining_hopping(uxx, uyy, uxy, 'h_2_m_1', (1, 5, 5)),
                'h_2_c_1': self.straining_hopping(uxx, uyy, uxy, 'h_2_c_1', (1, 3, 3)),
                'h_2_x_1': self.straining_hopping(uxx, uyy, uxy, 'h_2_x_1', (1, 3, 3)),
                'h_2_m_2': self.straining_hopping(uxx, uyy, uxy, 'h_2_m_2', (1, 5, 5)),
                'h_2_c_2': self.straining_hopping(uxx, uyy, uxy, 'h_2_c_2', (1, 3, 3)),
                'h_2_x_2': self.straining_hopping(uxx, uyy, uxy, 'h_2_x_2', (1, 3, 3)),
                'h_2_m_3': self.straining_hopping(uxx, uyy, uxy, 'h_2_m_3', (1, 5, 5)),
                'h_2_c_3': self.straining_hopping(uxx, uyy, uxy, 'h_2_c_3', (1, 3, 3)),
                'h_2_x_3': self.straining_hopping(uxx, uyy, uxy, 'h_2_x_3', (1, 3, 3)),
                'h_3_m_1': self.straining_hopping(uxx, uyy, uxy, 'h_3_m_1', (1, 3, 5)),
                'h_3_m_2': self.straining_hopping(uxx, uyy, uxy, 'h_3_m_2', (1, 3, 5)),
                'h_3_m_3': self.straining_hopping(uxx, uyy, uxy, 'h_3_m_3', (1, 3, 5)),
                'h_3_x_1': self.straining_hopping(uxx, uyy, uxy, 'h_3_x_1', (1, 3, 5)),
                'h_3_x_2': self.straining_hopping(uxx, uyy, uxy, 'h_3_x_2', (1, 3, 5)),
                'h_3_x_3': self.straining_hopping(uxx, uyy, uxy, 'h_3_x_3', (1, 3, 5)),
                'h_3_c_1': self.straining_hopping(uxx, uyy, uxy, 'h_3_c_1', (1, 3, 3)),
                'h_3_c_2': self.straining_hopping(uxx, uyy, uxy, 'h_3_c_2', (1, 3, 3)),
                'h_3_c_3': self.straining_hopping(uxx, uyy, uxy, 'h_3_c_3', (1, 3, 3))
            }
            return hopping if hop_id is None else hopping[hop_id]

    def strained_onsite(self, uxx, uyy, uxy, sub_id=None, shape=None):
        onsite = []
        u = np.array([uxx + uyy, uxx - uyy, 2 * uxy])
        metal_name, chalcogenide_name = re.findall("[A-Z][a-z]*", self.name)
        if hasattr(uxx, '__len__'):
            onsite = np.zeros(shape)
            metal_bool = np.array(sub_id == metal_name).flatten()
            chalcogenide_bool = np.array(sub_id == chalcogenide_name).flatten()
            chalcogenide_x_bool = np.array(sub_id == chalcogenide_name+"x").flatten()
            onsite[metal_bool] = self._stitching(u.T[metal_bool].T, self.h_0_m, shape)
            onsite[chalcogenide_bool] = self._stitching(u.T[chalcogenide_bool].T, self.h_0_c, shape)
            onsite[chalcogenide_x_bool] = self._stitching(u.T[chalcogenide_x_bool].T, self.h_0_x, shape)
        else:
            if sub_id is None:
                onsite = {
                    metal_name: self.strained_onsite(uxx, uyy, uxy, metal_name),
                    chalcogenide_name: self.strained_onsite(uxx, uyy, uxy, chalcogenide_name)
                }
            elif sub_id == metal_name:
                onsite = np.tensordot(self.h_0_m[1:], u, (0, 0))
            elif sub_id == chalcogenide_name:
                onsite = np.tensordot(self.h_0_c[1:], u, (0, 0))
            elif sub_id == chalcogenide_name + "x":
                onsite = np.tensordot(self.h_0_x[1:], u, (0, 0))
            if self.soc_doubled_ham and sub_id is not None:
                onsite = np.kron(np.eye(2), onsite)
        return onsite

    def uniform_strain(self, uxx, uyy, uxy, omega=0.):
        @pb.hopping_energy_modifier
        def strained_hoppings(energy, x1, y1, z1, x2, y2, z2, hop_id):
            ur_l = self.ur_m(omega).T if energy.shape[1] == 5 else self.ur_c(omega).T
            ur_r = self.ur_m(omega) if energy.shape[2] == 5 else self.ur_c(omega)
            return np.array([ur_l.dot(np.dot(energy1 + self.straining_hopping(uxx, uyy, uxy, hop_id=hop_id, shape=np.shape(energy))[0], ur_r)) for energy1 in energy])

        @pb.onsite_energy_modifier
        def strained_onsite(energy, x, y, z, sub_id):
            return energy + self.strained_onsite(uxx, uyy, uxy, sub_id=sub_id, shape=np.shape(energy))
        return strained_hoppings, strained_onsite

    def construct_hamiltonian_fang_matlab(self, k=None, u=None):
        if k is None:
            k = np.array([0, 0])
        if u is None:
            u = np.array([0, 0, 0])
        self.lat4 = False
        model = pb.Model(self.lattice(),
                         self.uniform_strain(u[0], u[1], u[2]),
                         pb.translational_symmetry(True, True))
        model.set_wave_vector(k)
        hamiltonian = np.array(model.hamiltonian.todense()).T
        delta = group4_class.a * np.array([.5, np.sqrt(3) / 6])
        phase = np.exp(1j * k.dot(delta))
        if not self.soc_doubled_ham:
            hamiltonian[0:2, 5:8] *= phase
            hamiltonian[5:8, 0:2] *= np.conjugate(phase)
            hamiltonian[2:5, 8:11] *= phase
            hamiltonian[8:11, 2:5] *= np.conjugate(phase)
            transform_list = np.array([0, 1, 5, 6, 7, 2, 3, 4, 8, 9, 10])
            transform = np.zeros((11, 11))
            for i in range(11):
                transform[i, transform_list[i]] = 1
            hamiltonian = np.dot(transform, np.dot(hamiltonian, transform.T))
        else:
            hamiltonian[0:2, 10:13] *= phase
            hamiltonian[10:13, 0:2] *= np.conjugate(phase)
            hamiltonian[5:7, 16:19] *= phase
            hamiltonian[16:19, 5:7] *= np.conjugate(phase)
            hamiltonian[2:5, 13:16] *= phase
            hamiltonian[13:16, 2:5] *= np.conjugate(phase)
            hamiltonian[7:10, 19:22] *= phase
            hamiltonian[19:22, 7:10] *= np.conjugate(phase)
            transform_list = np.array([0, 1, 12, 10, 11, 4, 2, 3, 15, 13, 14, 5, 6, 18, 16, 17, 9, 7, 8, 21, 19, 20])
            transform = np.zeros((22, 22))
            for i in range(22):
                transform[i, transform_list[i]] = 1
            hamiltonian = np.dot(transform, np.dot(hamiltonian, transform.T))
        return hamiltonian

    def test1(self, soc=False, lat4=False, path=1, fermi=False, lims=None):
        # path: 1 - G-K-M-G -- 2 - G-M-K-G -- 3 - M-G-K-M
        print("Doing every calculation with high precision,\n this can take a minute.")
        grid = plt.GridSpec(3, 3, hspace=0.4)
        plt.figure(figsize=(10, 8))
        self.soc = soc
        self.lat4 = lat4
        i = False
        for square, name in zip(grid, [*_default_11band_strain_params]):
            plt.subplot(square, title=name)
            self.name = name
            self._generate_matrices()
            lat4_tmp = self.lat4
            self.lat4 = False
            k_points = pb.Model(self.lattice(), pb.translational_symmetry()).lattice.brillouin_zone()
            gamma = [0, 0]
            k = k_points[1]
            m = (k_points[2] + k_points[1]) / 2
            self.lat4 = lat4_tmp
            self.name = name
            self._generate_matrices()
            model = pb.Model(self.lattice(), pb.translational_symmetry())
            if path == 1:
                bands = pb.solver.lapack(model).calc_bands(gamma, k, m, gamma, step=0.05)
                if fermi:
                    bands.energy = bands.energy + self.d_phi
                bands.plot(point_labels=[r"$\Gamma$", "K", "M", r"$\Gamma$"],
                           lw=1.5, color="C1" if i else "C0", ls=":" if i else "-")
            elif path == 2:
                bands = pb.solver.lapack(model).calc_bands(gamma, m, k, gamma, step=0.05)
                if fermi:
                    bands.energy = bands.energy + self.d_phi
                bands.plot(point_labels=[r"$\Gamma$", "M", "K", r"$\Gamma$"],
                           lw=1.5, color="C1" if i else "C0", ls=":" if i else "-")
            elif path == 3:
                bands = pb.solver.lapack(model).calc_bands(m, gamma, k, m, step=0.05)
                if fermi:
                    bands.energy = bands.energy + self.d_phi
                bands.plot(point_labels=["M", r"$\Gamma$", "K", "M"],
                           lw=1.5, color="C1" if i else "C0", ls=":" if i else "-")
            plt.gca().set_ylim(lims)
        plt.show()

    def test2(self, u=None, soc=False, omega=0.):
        plt.figure()
        # plot bands comparing lat4=False and lat4=True with a certain strain vector, giving the largest error between
        # the two models
        if u is None:
            u = np.array([1, .34, -.42])
        bands = []
        for lat4 in [False, True]: #[False, True]:
            self.lat4 = lat4
            self.soc = soc
            self._generate_matrices()
            model = pb.Model(self.lattice(),
                             self.uniform_strain(u[0], u[1], u[2], omega),
                             pb.translational_symmetry())
            solver = pb.solver.lapack(model)
            if not lat4:
                k_points = model.lattice.brillouin_zone()
                gamma = [0, 0]
                k = k_points[0]
                m = (k_points[0] + k_points[1]) / 2
            bands.append(solver.calc_bands(gamma, m, k, gamma, step=0.9))
        bands[0].plot(point_labels=[r"$\Gamma$", "M", "K", r"$\Gamma$"], lw=1.5, color="C0")
        bands[1].plot(point_labels=[r"$\Gamma$", "K", "M", r"$\Gamma$"], lw=1.5, color="C1", ls=":")
        error = np.array(
           [[np.abs(bands[1].energy[i] - bands[0].energy[i, j]).min()
             for j in range(bands[0].energy.shape[1])] for i in
            range(bands[0].energy.shape[0])])
           # class.test2()[0] for maximal error
        return error.max(), error, bands


if __name__ == "__main__":
    group9_class = Group9Tmd11BandStrain()
    group9_class.test1(path=2, fermi=True)
    group9_class.name = "TaSe2"
    #res = group9_class.test2(u=np.array([0, 0, 0]), omega=0)
    #res = group9_class.test2(u=np.array([-0.02, -0.02, 0]), omega=0.5)
    #ham = group4_class.construct_hamiltonian_fang_matlab(np.array([1, 2]), np.array([1, .34, -.42]))
